"""
The purpose of this file is to generate an overview markdown file based on the contents
of the review files. It is run during builds.

Copyright Open Source Security Foundation Authors
"""
import argparse
import logging
import os
import sys

import yaml
from packageurl import PackageURL

logging.basicConfig(level=logging.DEBUG)


class OverviewCreator:
    """Creates overview markdown files."""

    ROOT_URL = "https://github.com/ossf/security-reviews/blob/main/reviews/"

    def __init__(self, top_level_directory: str):
        """
        Initializes a new instance of this class.

        Args: top_level_directory: The top-level directory to search for reviews.
        """
        top_level_directory = os.path.abspath(top_level_directory)
        if not os.path.isdir(top_level_directory):
            raise Exception(f"Directory {top_level_directory} does not exist.")

        self.top_level_directory = top_level_directory
        self.reviews = []

    def load_metadata_directory(self):
        """Loads metadata from the top-level directory."""
        for root, _, files in os.walk(self.top_level_directory):
            for filename in files:
                if filename.endswith(".md"):
                    self.load_metadata_file(os.path.join(root, filename))

    def load_metadata_file(self, filename: str):
        """Loads metadata from a specific file."""
        metadata_content = []
        section = 0
        with open(filename, "r", encoding="utf-8") as metadata_file:
            for line in metadata_file.readlines():
                lstrip = line.strip()
                if section == 0 and lstrip == "---":
                    section = 1
                elif section == 1 and lstrip == "---":
                    break
                elif section == 1:
                    metadata_content.append(line)

        metadata = yaml.safe_load("\n".join(metadata_content))
        metadata["__relative_filename"] = os.path.relpath(filename, self.top_level_directory)
        self.reviews.append(metadata)

    def write_overview(self, filename: str):
        """
        Writes the overview details to a file.

        Args: filename: The filename to write to.
        """
        with open(filename, "w", encoding="utf-8") as overview_file:
            # Write the header
            overview_file.write(
                "<!--\n"
                "This file is automatically generated (scripts/generate_overview.py).\n"
                "Please do not modify it yourself, or it will be overwritten.\n"
                "-->\n\n"
                "# Security Reviews\n\n"
                "The following table provides an overview of all security reviews and "
                "associated work found in this repo, along with a link to the review report. "
                "You can also use the GitHub search box to look for specific reviews.\n\n"
            )
            overview_file.write(
                "| Project/Product | Review Date | Facilitated By | Issues | "
                "Methodology | Scope |\n"
            )
            overview_file.write("|-|-|-|-|-|-|\n")

            # Iterate through the collected reviews
            for review in self.reviews:
                review_names = sorted(
                    OverviewCreator.get_review_names(filename, review.get("Package-URLs", []))
                )
                if len(review_names) > 2:
                    review_names = review_names[:2] + [f"and {len(review_names) - 2} more"]
                url = self.ROOT_URL + review.get("__relative_filename").replace("\\", "/")
                facilitated_by = (
                    map(lambda s: s.get("Organization", ""), review.get("Reviewers", [])) or []
                )
                facilitated_by = ", ".join(facilitated_by)
                overview_file.write(
                    f"| [{', '.join(review_names)}]({url}) | "
                    f"{review.get('Review-Date', '')} | "
                    f"{facilitated_by} | "
                    f"{review.get('Issues-Identified', '')} | "
                    f"{', '.join(review.get('Methodology', []))} | "
                    f"{review.get('Scope', '')} |\n"
                )

    @classmethod
    def get_review_names(cls, filename, package_urls):
        """Get the best name(s) of the review, based on the filename and the Package-URLs"""
        candidates = set()
        for package_url in package_urls:
            purl = PackageURL.from_string(package_url)
            if purl:
                if purl.namespace:
                    candidates.add(purl.namespace + "/" + purl.name)
                else:
                    candidates.add(purl.name)
        if not candidates:
            candidates.add(os.path.basename(filename))
        return candidates


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Generate an overview of all security reviews.")
    parser.add_argument("--directory", type=str, required=True)
    args = parser.parse_args()

    try:
        creator = OverviewCreator(args.directory)
        creator.load_metadata_directory()
        creator.write_overview("Overview.md")
        sys.exit(0)
    except Exception as msg:
        logging.error("Error creating review: %s", msg, exc_info=True)
        sys.exit(1)

